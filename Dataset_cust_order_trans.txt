The default date format of Hive is yyyy-MM-dd, and for Timestamp yyyy-MM-dd HH:mm:ss.

Assg1# Create an external table named- order with following Schema:
file with csv format

orders:

order_id INT
order_create_dt date
customer_id INT
total_amount FLOAT
order_exec_dt DATE

order_id,order_create_dt,customer_id,total_amount,order_exec_dt
1,2023-01-05,101,250.5,2020-11-20 06:10:45
2,2023-02-12,102,300.0,2020-11-20 06:10:45
3,2022-12-20,103,150.75,2020-11-20 06:10:45
4,2023-03-10,101,200.0,2020-11-20 06:10:45
5,2023-01-28,104,350.25,2020-11-20 06:10:45


Assg2# Create an external table named- customer with following Schema:
file with Parquet Format
Partitioned on city

customer_id,customer_name,city,age,update_dt
101,John Doe,New York,35,2020-11-20 06:10:45
102,Jane Smith,San Francisco,28,2020-11-20 06:10:45
103,Bob Johnson,Los Angeles,40,2020-11-20 06:10:45
104,Alice Brown,Chicago,32,2020-11-20 06:10:45
105,Sarah Wilson,Boston,29,2020-11-20 06:10:45

Assg2# Create an external table named- transaction with following Schema:
file with Parquet Format
Partitioned on transaction_date,prod_code

transaction_date

transaction_id,product_name,prod_code,quantity,unit_price,transaction_date
1,Product A,Prod_A,5,25.0,2023-01-15 06:10:45
2,Product B,Pod_B,8,30.0,2023-02-20 06:10:45
3,Product A,Prod_A,3,25.0,2023-01-10 06:10:45
4,Product C,Prod_C,10,15.0,2023-03-05 06:10:45
5,Product B,Pod_B,6,30.0,2023-02-28 06:10:45


Assignment 2: Join Operations
Data: Orders and Customers

Create two tables:

orders:

order_id INT
order_date DATE
customer_id INT
total_amount FLOAT
customers:

customer_id INT
customer_name STRING
city STRING
age INT


Tasks:

Load the provided data into the orders and customers tables in Hive.
Write a Hive query to retrieve the customer_name, order_date, and total_amount of each order along with their respective city.


Assignment 3: Aggregation and Subqueries
Data: Sales Records

Create a table named sales_data:

transaction_id INT
product_name STRING
quantity INT
unit_price FLOAT
transaction_date DATE


Tasks:

Load the provided sales data into the sales_data table.
Write a Hive query to calculate the total revenue generated by each product.
Implement a subquery in Hive to find the product(s) with the highest total revenue.
These assignments should give you a good start in practicing HiveQL queries using various data manipulation, joining, aggregation, and subquery techniques.



Use Case 1: Customer Analytics
Task:

Write a Hive query to find the total number of customers from each city.
Retrieve the top 3 cities with the highest number of customers.
Example Query:

-- Total number of customers from each city
SELECT city, COUNT(customer_id) AS total_customers
FROM customers
GROUP BY city
ORDER BY total_customers DESC;

-- Top 3 cities with the highest number of customers
SELECT city, COUNT(customer_id) AS total_customers
FROM customers
GROUP BY city
ORDER BY total_customers DESC
LIMIT 3;

Use Case 2: Order Analysis
Task:

Calculate the total sales amount for each customer.
Identify the customers who made purchases more than $300 in total.
Example Query:

-- Total sales amount for each customer
SELECT c.customer_id, c.customer_name, c.city, SUM(o.total_amount) AS total_sales_amount
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name, c.city
ORDER BY total_sales_amount DESC;

-- Customers who made purchases more than $300 in total
SELECT c.customer_id, c.customer_name, c.city, SUM(o.total_amount) AS total_sales_amount
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.customer_name, c.city
HAVING total_sales_amount > 300;


Use Case 3: Order Date Analysis
Task:

Find the monthly sales totals for each month.
Retrieve the month with the highest sales.

-- Monthly sales totals
SELECT YEAR(order_date) AS sales_year, MONTH(order_date) AS sales_month, SUM(total_amount) AS monthly_sales
FROM orders
GROUP BY YEAR(order_date), MONTH(order_date)
ORDER BY sales_year, sales_month;

-- Month with the highest sales
SELECT YEAR(order_date) AS sales_year, MONTH(order_date) AS sales_month, SUM(total_amount) AS monthly_sales
FROM orders
GROUP BY YEAR(order_date), MONTH(order_date)
ORDER BY monthly_sales DESC
LIMIT 1;

